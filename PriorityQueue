using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Threading.Tasks;

namespace Router
{
    abstract public class PriorityQueue<T> where T : new()  // klasa abstrakcyjna kolejnki priorytetowej / pod nia podpieta jest lista nieuporzadkowana oraz stog
    {
        protected Object<T>[] o;
        protected int numberOfInsertedElements;
        protected int numberOfDeletedElements;

        public void initialization(int A, int B, int M, int N)  // inicjalizacja tablicy z ktorej korzysta stog i lista/ jest w niej A+1 elementow/
        {                                                       // ze wzgledu na liczenie ich w stogu od 1 / I element w stogu jest zawsze null

            o = new Object<T>[A + 1];

        }

        public abstract void Insert(Object<T> ob);
        public abstract Object<T> Delete();

        public TimeSpan Test(int A, int B, int M, int N)  // metoda testujaca, zwraca czas testu danej kolejki priorytetowej / 
        {                                                 // testowany jest czas wlozenia A elementow oraz usuniecia i dodania B razy elemntu
            Stopwatch stopWatch = new Stopwatch();
            
            Random r = new Random();

            stopWatch.Start();
            initialization(A, B, M, N);

            stopWatch.Stop();

            stopWatch.Start();
            for (int i = 0; i < A; i++)
            {
                int a = r.Next(1, M);
                int b = r.Next(1, 4);
                int c = r.Next(1, 20);
                Insert(new Object<T>(a, c, b, new T()));
            }

            stopWatch.Stop();
            Console.WriteLine("A times Inserting time: {0}", stopWatch.Elapsed);

            stopWatch.Start();
            for (int i = 0; i < B; i++)
            {
                int a = r.Next(1, N);
                int b = r.Next(1, 4);
                int c = r.Next(1, 20);
                Delete();
                Insert(new Object<T>(a, c, b, new T()));
            }

            stopWatch.Stop();
            Console.WriteLine("B times Deleting and inserting time: {0}", stopWatch.Elapsed);

            return stopWatch.Elapsed;
        }

    }
}
